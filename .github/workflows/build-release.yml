name: Build and Release Windows Executable

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Display .NET version
      run: dotnet --version

    - name: Clear NuGet cache
      run: dotnet nuget locals all --clear

    - name: Build and package release
      run: .\scripts\build-release.ps1 -NoPause
      shell: pwsh

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: AudioToggle_Windows_${{ github.run_number }}
        path: |
          dist/AudioToggle_Windows_v*.zip
        retention-days: 30

  check-version-and-release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Validate repository access
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "Token exists: ${{ secrets.GITHUB_TOKEN != '' }}"

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from csproj
      id: get_version
      run: |
        # Use sed instead of grep -oP for better compatibility
        VERSION=$(sed -n 's/.*<Version>\(.*\)<\/Version>.*/\1/p' src/AudioToggle.csproj | head -1)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Found version: $VERSION"

    - name: Extract release notes from CHANGELOG.md
      id: get_changelog
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        echo "Looking for release notes for version: $VERSION"

        if [ -f "CHANGELOG.md" ]; then
          echo "CHANGELOG.md found"

          # Extract the current version's release notes
          # Look for pattern like "## [1.0.1] - 2025-08-31"
          VERSION_PATTERN="## \\[$VERSION\\]"

          echo "Searching for pattern: $VERSION_PATTERN"

          # Use sed to extract content between version headers
          RELEASE_NOTES=$(sed -n "/$VERSION_PATTERN/,/^## \[[0-9]/p" CHANGELOG.md |
                         sed "/$VERSION_PATTERN/d" |
                         sed "/^## \[[0-9]/d" |
                         sed '/^---$/d' |
                         sed '/^$/N;/^\n$/d' |
                         sed '/^$/d')

          echo "Extracted release notes:"
          echo "$RELEASE_NOTES"

          if [ -n "$RELEASE_NOTES" ]; then
            # Format for GitHub release (escape for multiline output)
            {
              echo "release_notes<<EOF"
              echo "$RELEASE_NOTES"
              echo "EOF"
            } >> $GITHUB_OUTPUT
            echo "Successfully extracted release notes for v$VERSION"
          else
            echo "release_notes=### Changes
          - See commit history for detailed changes" >> $GITHUB_OUTPUT
            echo "No release notes found for v$VERSION, using fallback"
          fi
        else
          echo "release_notes=### Changes
          - See commit history for detailed changes" >> $GITHUB_OUTPUT
          echo "CHANGELOG.md not found, using fallback"
        fi

    - name: Check for existing release
      id: check_release
      run: |
        # Use GitHub API instead of gh CLI for better reliability
        RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.get_version.outputs.version }}")

        if echo "$RESPONSE" | grep -q '"id":'; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.get_version.outputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.get_version.outputs.version }} does not exist"
        fi

    - name: Download build artifacts
      if: steps.check_release.outputs.exists == 'false'
      uses: actions/download-artifact@v4
      with:
        name: AudioToggle_Windows_${{ github.run_number }}
        path: ./artifacts

    - name: Create GitHub release
      if: steps.check_release.outputs.exists == 'false'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: AudioToggle v${{ steps.get_version.outputs.version }}
        body: |
          ${{ steps.get_changelog.outputs.release_notes }} 
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}

    - name: Upload release assets
      if: steps.check_release.outputs.exists == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/AudioToggle_Windows_v${{ steps.get_version.outputs.version }}.zip
        asset_name: AudioToggle_Windows_v${{ steps.get_version.outputs.version }}.zip
        asset_content_type: application/zip
